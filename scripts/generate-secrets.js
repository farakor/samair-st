#!/usr/bin/env node

const crypto = require('crypto');
const fs = require('fs');
const path = require('path');

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç—ã –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω-—Å—Ä–µ–¥—ã
 */

console.log('üîê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤ –¥–ª—è SamAir...\n');

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Å–µ–∫—Ä–µ—Ç (64 –±–∞–π—Ç–∞ = 128 —Å–∏–º–≤–æ–ª–æ–≤ –≤ hex)
const jwtSecret = crypto.randomBytes(64).toString('hex');

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ–∫—Ä–µ—Ç —Å–µ—Å—Å–∏–∏ (32 –±–∞–π—Ç–∞ = 64 —Å–∏–º–≤–æ–ª–∞ –≤ hex)
const sessionSecret = crypto.randomBytes(32).toString('hex');

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (24 —Å–∏–º–≤–æ–ª–∞, –≤–∫–ª—é—á–∞—è —Å–ø–µ—Ü. —Å–∏–º–≤–æ–ª—ã)
const dbPassword = generateSecurePassword(24);

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞
const adminPassword = generateSecurePassword(16);

console.log('‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç—ã:');
console.log('='.repeat(50));
console.log(`JWT_SECRET=${jwtSecret}`);
console.log(`SESSION_SECRET=${sessionSecret}`);
console.log(`DB_PASSWORD=${dbPassword}`);
console.log(`ADMIN_PASSWORD=${adminPassword}`);
console.log('='.repeat(50));

// –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª .env.generated —Å –Ω–æ–≤—ã–º–∏ —Å–µ–∫—Ä–µ—Ç–∞–º–∏
const envContent = `# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç—ã
# –î–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${new Date().toISOString()}

# –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–∏ —Å–µ–∫—Ä–µ—Ç—ã –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ!

# JWT –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
JWT_SECRET=${jwtSecret}
JWT_EXPIRES_IN=24h

# –°–µ—Å—Å–∏–∏
SESSION_SECRET=${sessionSecret}

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
DB_PASSWORD=${dbPassword}

# –ü–∞—Ä–æ–ª—å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_PASSWORD=${adminPassword}

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
BCRYPT_ROUNDS=14
NODE_ENV=production

# CORS (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –¥–æ–º–µ–Ω!)
CORS_ORIGIN=https://your-domain.com

# Rate limiting –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=50

# –î—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥ —Å–≤–æ—é —Å—Ä–µ–¥—É)
DB_HOST=localhost
DB_PORT=5432
DB_NAME=samair_db_prod
DB_USER=samair_user

PORT=3001

# SMTP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥ —Å–≤–æ–π SMTP —Å–µ—Ä–≤–µ—Ä)
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_SECURE=false
SMTP_USER=your_email@gmail.com
SMTP_PASS=your_app_password

# IMAP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥ —Å–≤–æ–π IMAP —Å–µ—Ä–≤–µ—Ä)
IMAP_HOST=imap.gmail.com
IMAP_PORT=993
IMAP_SECURE=true
IMAP_USER=your_email@gmail.com
IMAP_PASS=your_app_password

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
LOG_LEVEL=warn
LOG_FILE=logs/samair.log

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–æ–≤
MAX_FILE_SIZE=50MB
ALLOWED_FILE_TYPES=.xlsx,.xls,.csv

# SSL (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
TRUST_PROXY=true
SECURE_COOKIES=true
`;

const envPath = path.join(__dirname, '../server/.env.generated');
fs.writeFileSync(envPath, envContent);

console.log(`\nüíæ –°–µ–∫—Ä–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: ${envPath}`);
console.log('\nüö® –í–ê–ñ–ù–´–ï –ò–ù–°–¢–†–£–ö–¶–ò–ò:');
console.log('1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ .env.generated –≤ .env');
console.log('2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ SMTP/IMAP –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥ –≤–∞—à –ø–æ—á—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä');
console.log('3. –ò–∑–º–µ–Ω–∏—Ç–µ CORS_ORIGIN –Ω–∞ –≤–∞—à –¥–æ–º–µ–Ω');
console.log('4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
console.log('5. –ù–ò–ö–û–ì–î–ê –Ω–µ –∫–æ–º–º–∏—Ç—å—Ç–µ —Ñ–∞–π–ª—ã —Å —Å–µ–∫—Ä–µ—Ç–∞–º–∏ –≤ git!');
console.log('6. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª–∏ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ–Ω–µ–¥–∂–µ—Ä–µ –ø–∞—Ä–æ–ª–µ–π');

console.log('\nüîß –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:');
console.log(`cp ${envPath} server/.env`);
console.log('npm run build');
console.log('npm run server');

// –°–æ–∑–¥–∞–µ–º SQL —Å–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î
const sqlContent = `-- –°–∫—Ä–∏–ø—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è SamAir
-- –î–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${new Date().toISOString()}

-- –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
CREATE USER samair_user WITH PASSWORD '${dbPassword}';

-- –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
CREATE DATABASE samair_db_prod OWNER samair_user;

-- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
\\c samair_db_prod;

-- –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
GRANT CONNECT ON DATABASE samair_db_prod TO samair_user;
GRANT USAGE ON SCHEMA public TO samair_user;
GRANT CREATE ON SCHEMA public TO samair_user;
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO samair_user;
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO samair_user;

-- –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ –Ω–∞ –±—É–¥—É—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO samair_user;
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON SEQUENCES TO samair_user;

-- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
`;

const sqlPath = path.join(__dirname, '../database-setup.sql');
fs.writeFileSync(sqlPath, sqlContent);

console.log(`\nüíæ SQL —Å–∫—Ä–∏–ø—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${sqlPath}`);
console.log('–í—ã–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –æ—Ç –∏–º–µ–Ω–∏ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è PostgreSQL:');
console.log(`psql -U postgres -f ${sqlPath}`);

console.log('\n‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–∫—Ä–µ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä–æ–ª—å
 */
function generateSecurePassword(length = 16) {
  const lowercase = 'abcdefghijklmnopqrstuvwxyz';
  const uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
  const numbers = '0123456789';
  const symbols = '!@#$%^&*()_+-=[]{}|;:,.<>?';
  const allChars = lowercase + uppercase + numbers + symbols;
  
  let password = '';
  
  // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –º–∏–Ω–∏–º—É–º –ø–æ –æ–¥–Ω–æ–º—É —Å–∏–º–≤–æ–ª—É –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
  password += lowercase[crypto.randomInt(lowercase.length)];
  password += uppercase[crypto.randomInt(uppercase.length)];
  password += numbers[crypto.randomInt(numbers.length)];
  password += symbols[crypto.randomInt(symbols.length)];
  
  // –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Å—Ç–∞–≤—à—É—é—Å—è –¥–ª–∏–Ω—É
  for (let i = password.length; i < length; i++) {
    password += allChars[crypto.randomInt(allChars.length)];
  }
  
  // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Å–∏–º–≤–æ–ª—ã
  return password.split('').sort(() => crypto.randomInt(3) - 1).join('');
}