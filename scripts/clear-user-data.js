#!/usr/bin/env node
/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
 * –£–¥–∞–ª—è–µ—Ç:
 * - –î–∞–Ω–Ω—ã–µ —Ä–µ–π—Å–æ–≤ –∏–∑ PostgreSQL
 * - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö –∏–∑ PostgreSQL  
 * - –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ uploads
 * - Email –ª–æ–≥–∏
 * 
 * –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!
 */

const fs = require('fs-extra');
const path = require('path');
const readline = require('readline');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
const { query, testConnection } = require('../server/config/database');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function askQuestion(question) {
  return new Promise((resolve) => {
    rl.question(question, resolve);
  });
}

async function clearUserData() {
  console.log('\nüßπ –°–ö–†–ò–ü–¢ –û–ß–ò–°–¢–ö–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–• –î–ê–ù–ù–´–•');
  console.log('=========================================\n');
  
  console.log('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —É–¥–∞–ª–∏—Ç –í–°–ï –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ:');
  console.log('   - –í—Å–µ —Ä–µ–π—Å—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL');
  console.log('   - –í—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
  console.log('   - –í—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ uploads');
  console.log('   - Email –ª–æ–≥–∏');
  console.log('   - –ù–ï –∑–∞—Ç—Ä–æ–Ω–µ—Ç: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ email\n');
  
  const confirmation1 = await askQuestion('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (–¥–∞/–Ω–µ—Ç): ');
  
  if (confirmation1.toLowerCase() !== '–¥–∞' && confirmation1.toLowerCase() !== 'yes') {
    console.log('‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
    rl.close();
    return;
  }
  
  const confirmation2 = await askQuestion('üî¥ –ü–û–°–õ–ï–î–ù–ï–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã! –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (–£–î–ê–õ–ò–¢–¨/–Ω–µ—Ç): ');
  
  if (confirmation2 !== '–£–î–ê–õ–ò–¢–¨') {
    console.log('‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
    rl.close();
    return;
  }
  
  console.log('\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö...\n');
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL...');
    const isConnected = await testConnection();
    
    if (isConnected) {
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ');
      
      // 2. –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
      console.log('\n2Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...');
      try {
        const flightsCount = await query('SELECT COUNT(*) as count FROM flight_data');
        const filesCount = await query('SELECT COUNT(*) as count FROM uploaded_files');
        
        console.log(`üìä –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ:`);
        console.log(`   - –†–µ–π—Å–æ–≤: ${flightsCount.rows[0].count}`);
        console.log(`   - –§–∞–π–ª–æ–≤: ${filesCount.rows[0].count}`);
      } catch (error) {
        console.log('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–≤–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–±–ª–∏—Ü—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç)');
      }
      
      // 3. –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–π—Å–æ–≤
      console.log('\n3Ô∏è‚É£ –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–π—Å–æ–≤...');
      const flightsResult = await query('DELETE FROM flight_data');
      console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${flightsResult.rowCount} –∑–∞–ø–∏—Å–µ–π —Ä–µ–π—Å–æ–≤`);
      
      // 4. –û—á–∏—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö
      console.log('\n4Ô∏è‚É£ –û—á–∏—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö...');
      const filesResult = await query('DELETE FROM uploaded_files');
      console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${filesResult.rowCount} –∑–∞–ø–∏—Å–µ–π –æ —Ñ–∞–π–ª–∞—Ö`);
      
      console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    } else {
      console.log('‚ö†Ô∏è  PostgreSQL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
    }
    
    // 5. –û—á–∏—â–∞–µ–º –ø–∞–ø–∫—É uploads
    console.log('\n5Ô∏è‚É£ –û—á–∏—â–∞–µ–º –ø–∞–ø–∫—É uploads...');
    const uploadsDir = path.join(__dirname, '../server/data/uploads');
    
    if (await fs.pathExists(uploadsDir)) {
      const files = await fs.readdir(uploadsDir);
      const filesToDelete = files.filter(file => file !== '.DS_Store');
      
      if (filesToDelete.length > 0) {
        for (const file of filesToDelete) {
          const filePath = path.join(uploadsDir, file);
          await fs.remove(filePath);
          console.log(`üóëÔ∏è  –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: ${file}`);
        }
        console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${filesToDelete.length} —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ uploads`);
      } else {
        console.log('üìÇ –ü–∞–ø–∫–∞ uploads —É–∂–µ –ø—É—Å—Ç–∞');
      }
    } else {
      console.log('üìÇ –ü–∞–ø–∫–∞ uploads –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    
    // 6. –û—á–∏—â–∞–µ–º email –ª–æ–≥–∏
    console.log('\n6Ô∏è‚É£ –û—á–∏—â–∞–µ–º email –ª–æ–≥–∏...');
    const emailLogsPath = path.join(__dirname, '../server/data/config/email-logs.json');
    
    if (await fs.pathExists(emailLogsPath)) {
      // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –ª–æ–≥–æ–≤
      const emptyLogs = [];
      await fs.writeJSON(emailLogsPath, emptyLogs, { spaces: 2 });
      console.log('‚úÖ Email –ª–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã');
    } else {
      console.log('üìÇ –§–∞–π–ª email –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    console.log('\nüéâ –û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!');
    console.log('=============================\n');
    console.log('–û—á–∏—â–µ–Ω—ã:');
    console.log('‚úÖ –í—Å–µ —Ä–µ–π—Å—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
    console.log('‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');  
    console.log('‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ uploads');
    console.log('‚úÖ Email –ª–æ–≥–∏');
    console.log('\n–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã:');
    console.log('üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ –∏—Ö –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞');
    console.log('üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∏ email');
    console.log('üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã');
    
    console.log('\nüí° –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: IndexedDB –≤ –±—Ä–∞—É–∑–µ—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—á–∏—Å—Ç–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –≤—Ö–æ–¥–µ –≤ —Å–∏—Å—Ç–µ–º—É\n');
    
  } catch (error) {
    console.error('\n‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –û–ß–ò–°–¢–ö–ï –î–ê–ù–ù–´–•:', error);
    console.error('‚ùå –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
    process.exit(1);
  } finally {
    rl.close();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
clearUserData().catch(error => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});