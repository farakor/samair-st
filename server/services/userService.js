const AuthService = require('./authService');
const { query } = require('../config/database');

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é
 */
class UserService {
  constructor() {
    this.isInitialized = false;
    // –ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ä–∞–∑—É, –¥–æ–∂–¥–µ–º—Å—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–æ–ª—è–º–∏
   */
  async initializeUsers() {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
      const existingAdmins = await query(`
        SELECT id FROM users WHERE role = 'superadmin'
      `);

      if (existingAdmins.rows.length === 0) {
        console.log('üë• –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤...');
        
        // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        const hashedPassword = await AuthService.hashPassword('eNL+i6wQ$56Kj?W');
        
        const initialUsers = [
          {
            email: 'farrukh.oripov@gmail.com',
            name: '–û—Ä–∏–ø–æ–≤ –§–∞—Ä—Ä—É—Ö',
            role: 'superadmin',
            password: hashedPassword
          },
          {
            email: 'farrukhoripov@gmail.com',
            name: '–û—Ä–∏–ø–æ–≤ –§–∞—Ä—Ä—É—Ö (–∞–ª—å—Ç)',
            role: 'superadmin',
            password: hashedPassword
          }
        ];

        for (const user of initialUsers) {
          await query(`
            INSERT INTO users (email, name, role, password, created_at, is_active)
            VALUES ($1, $2, $3, $4, NOW(), true)
            ON CONFLICT (email) DO NOTHING
          `, [user.email, user.name, user.role, user.password]);
        }
        
        console.log('‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–µ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —Å–æ–∑–¥–∞–Ω—ã');
      } else {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${existingAdmins.rows.length} —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
      }

      this.isInitialized = true;
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö PostgreSQL');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
      throw error;
    }
  }

  /**
   * –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async authenticateUser(email, password) {
    try {
      if (!email || !password) {
        throw new Error('Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
      }

      console.log(`üîç –ü–æ–ø—ã—Ç–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${email}`);
      
      // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const userResult = await query(`
        SELECT id, email, name, role, password, last_login, is_active 
        FROM users 
        WHERE email = $1 AND is_active = true
      `, [email]);

      if (userResult.rows.length === 0) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      const user = userResult.rows[0];
      console.log(`üë• –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.email} (${user.role})`);

      const isPasswordValid = await AuthService.verifyPassword(password, user.password);
      
      if (!isPasswordValid) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å');
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
      await query(`
        UPDATE users 
        SET last_login = NOW() 
        WHERE id = $1
      `, [user.id]);

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω
      const token = AuthService.generateToken(user.id, user.email, user.role);

      return {
        success: true,
        token,
        user: {
          id: user.id,
          email: user.email,
          name: user.name,
          role: user.role,
          lastLogin: new Date().toISOString()
        }
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async createUser(userData, creatorId) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ —Å–æ–∑–¥–∞—Ç–µ–ª—è
      const creatorResult = await query(`
        SELECT id, role FROM users WHERE id = $1 AND is_active = true
      `, [creatorId]);

      if (creatorResult.rows.length === 0 || creatorResult.rows[0].role !== 'superadmin') {
        throw new Error('–¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      const existingUserResult = await query(`
        SELECT id FROM users WHERE email = $1
      `, [userData.email.toLowerCase().trim()]);

      if (existingUserResult.rows.length > 0) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      }

      // –í–∞–ª–∏–¥–∞—Ü–∏—è email
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(userData.email)) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email');
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä–æ–ª—å
      const password = AuthService.generateSecurePassword(16);
      const hashedPassword = await AuthService.hashPassword(password);

      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const insertResult = await query(`
        INSERT INTO users (email, name, role, password, created_at, is_active)
        VALUES ($1, $2, $3, $4, NOW(), true)
        RETURNING id, email, name, role, created_at
      `, [
        userData.email.toLowerCase().trim(),
        userData.name.trim(),
        userData.role,
        hashedPassword
      ]);

      const newUser = insertResult.rows[0];

      return {
        success: true,
        user: {
          id: newUser.id,
          email: newUser.email,
          name: newUser.name,
          role: newUser.role,
          createdAt: newUser.created_at
        },
        generatedPassword: password
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      throw error;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async updateUser(userId, updateData, updaterId) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –æ–±–Ω–æ–≤–∏—Ç–µ–ª—è
      const updaterResult = await query(`
        SELECT id, role FROM users WHERE id = $1 AND is_active = true
      `, [updaterId]);

      if (updaterResult.rows.length === 0 || updaterResult.rows[0].role !== 'superadmin') {
        throw new Error('–¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª—è–µ–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userResult = await query(`
        SELECT id, email, name, role, is_active FROM users WHERE id = $1
      `, [userId]);

      if (userResult.rows.length === 0) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      const user = userResult.rows[0];

      // –ó–∞—â–∏—Ç–∞ –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞
      if (user.role === 'superadmin' && userId !== updaterId) {
        throw new Error('–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ –¥—Ä—É–≥–æ–≥–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞');
      }

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      const allowedFields = ['name', 'email', 'role', 'is_active'];
      const updates = [];
      const values = [];
      let valueIndex = 1;

      for (const field of allowedFields) {
        const updateField = field === 'is_active' ? 'isActive' : field;
        if (updateData[updateField] !== undefined) {
          if (field === 'email') {
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            if (!emailRegex.test(updateData[updateField])) {
              throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email');
            }
            updates.push(`${field} = $${valueIndex}`);
            values.push(updateData[updateField].toLowerCase().trim());
          } else if (field === 'name') {
            updates.push(`${field} = $${valueIndex}`);
            values.push(updateData[updateField].trim());
          } else {
            updates.push(`${field} = $${valueIndex}`);
            values.push(updateData[updateField]);
          }
          valueIndex++;
        }
      }

      if (updates.length === 0) {
        throw new Error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
      }

      // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      values.push(userId);
      const updateResult = await query(`
        UPDATE users 
        SET ${updates.join(', ')}
        WHERE id = $${valueIndex}
        RETURNING id, email, name, role, is_active
      `, values);

      return {
        success: true,
        user: {
          id: updateResult.rows[0].id,
          email: updateResult.rows[0].email,
          name: updateResult.rows[0].name,
          role: updateResult.rows[0].role,
          isActive: updateResult.rows[0].is_active
        }
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      throw error;
    }
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async deleteUser(userId, deleterId) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ —É–¥–∞–ª—è—é—â–µ–≥–æ
      const deleterResult = await query(`
        SELECT id, role FROM users WHERE id = $1 AND is_active = true
      `, [deleterId]);

      if (deleterResult.rows.length === 0 || deleterResult.rows[0].role !== 'superadmin') {
        throw new Error('–¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª—è–µ–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userResult = await query(`
        SELECT id, role FROM users WHERE id = $1
      `, [userId]);

      if (userResult.rows.length === 0) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      const userToDelete = userResult.rows[0];

      if (userToDelete.role === 'superadmin') {
        throw new Error('–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞');
      }

      // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      await query(`
        DELETE FROM users WHERE id = $1
      `, [userId]);

      return {
        success: true,
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  async getAllUsers(requesterId) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞—é—â–µ–≥–æ
      const requesterResult = await query(`
        SELECT id, role FROM users WHERE id = $1 AND is_active = true
      `, [requesterId]);

      if (requesterResult.rows.length === 0 || requesterResult.rows[0].role !== 'superadmin') {
        throw new Error('–¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
      }

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const usersResult = await query(`
        SELECT id, email, name, role, created_at, last_login, is_active
        FROM users
        ORDER BY created_at DESC
      `);

      return usersResult.rows.map(user => ({
        id: user.id,
        email: user.email,
        name: user.name,
        role: user.role,
        createdAt: user.created_at,
        lastLogin: user.last_login,
        isActive: user.is_active
      }));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
      throw error;
    }
  }

  /**
   * –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è
   */
  async changePassword(userId, currentPassword, newPassword) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userResult = await query(`
        SELECT id, password FROM users WHERE id = $1 AND is_active = true
      `, [userId]);

      if (userResult.rows.length === 0) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      const user = userResult.rows[0];

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å
      const isCurrentPasswordValid = await AuthService.verifyPassword(currentPassword, user.password);
      if (!isCurrentPasswordValid) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å');
      }

      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
      const passwordValidation = AuthService.validatePasswordStrength(newPassword);
      if (!passwordValidation.isValid) {
        throw new Error(`–ü–∞—Ä–æ–ª—å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º: ${passwordValidation.errors.join(', ')}`);
      }

      // –•–µ—à–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
      const hashedNewPassword = await AuthService.hashPassword(newPassword);

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await query(`
        UPDATE users SET password = $1 WHERE id = $2
      `, [hashedNewPassword, userId]);

      return {
        success: true,
        message: '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω'
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è:', error);
      throw error;
    }
  }

  /**
   * –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–ª–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º)
   */
  async resetPassword(userId, reseterId) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ —Å–±—Ä–∞—Å—ã–≤–∞—é—â–µ–≥–æ
      const reseterResult = await query(`
        SELECT id, role FROM users WHERE id = $1 AND is_active = true
      `, [reseterId]);

      if (reseterResult.rows.length === 0 || 
          (reseterResult.rows[0].role !== 'superadmin' && reseterResult.rows[0].role !== 'full_access')) {
        throw new Error('–¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø–æ–ª–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º –º–æ–≥—É—Ç —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å –ø–∞—Ä–æ–ª–∏');
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–±—Ä–æ—Å–∞
      const userResult = await query(`
        SELECT id, email, name, role FROM users WHERE id = $1
      `, [userId]);

      if (userResult.rows.length === 0) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      const userToReset = userResult.rows[0];

      // –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞
      if (userToReset.role === 'superadmin' && userId !== reseterId) {
        throw new Error('–ù–∏–∫—Ç–æ –Ω–µ –º–æ–∂–µ—Ç —Å–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞, –∫—Ä–æ–º–µ –Ω–µ–≥–æ —Å–∞–º–æ–≥–æ');
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä–æ–ª—å
      const newPassword = AuthService.generateSecurePassword(16);
      const hashedPassword = await AuthService.hashPassword(newPassword);

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await query(`
        UPDATE users SET password = $1 WHERE id = $2
      `, [hashedPassword, userId]);

      return {
        success: true,
        user: {
          id: userToReset.id,
          email: userToReset.email,
          name: userToReset.name,
          role: userToReset.role
        },
        newPassword: newPassword
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
   */
  async getUserById(userId) {
    try {
      const userResult = await query(`
        SELECT id, email, name, role, created_at, last_login, is_active
        FROM users 
        WHERE id = $1
      `, [userId]);

      if (userResult.rows.length === 0) {
        return null;
      }

      const user = userResult.rows[0];
      return {
        id: user.id,
        email: user.email,
        name: user.name,
        role: user.role,
        createdAt: user.created_at,
        lastLogin: user.last_login,
        isActive: user.is_active
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID:', error);
      return null;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
   */
  getInitializationStatus() {
    return this.isInitialized;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton
const userService = new UserService();
module.exports = userService;