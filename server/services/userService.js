const AuthService = require('./authService');

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é
 */
class UserService {
  constructor() {
    this.users = [];
    this.isInitialized = false;
    this.initializeUsers();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–æ–ª—è–º–∏
   */
  async initializeUsers() {
    try {
      // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      const hashedPassword = await AuthService.hashPassword('eNL+i6wQ$56Kj?W');
      
      const initialUsers = [
        {
          id: 1,
          email: 'farrukh.oripov@gmail.com',
          name: '–û—Ä–∏–ø–æ–≤ –§–∞—Ä—Ä—É—Ö',
          role: 'superadmin',
          password: hashedPassword,
          createdAt: new Date().toISOString(),
          lastLogin: null,
          isActive: true
        },
        {
          id: 2,
          email: 'farrukhoripov@gmail.com',
          name: '–û—Ä–∏–ø–æ–≤ –§–∞—Ä—Ä—É—Ö (–∞–ª—å—Ç)',
          role: 'superadmin',
          password: hashedPassword,
          createdAt: new Date().toISOString(),
          lastLogin: null,
          isActive: true
        }
      ];

      this.users = initialUsers;
      this.isInitialized = true;
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–æ–ª—è–º–∏');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
      throw error;
    }
  }

  /**
   * –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async authenticateUser(email, password) {
    try {
      if (!email || !password) {
        throw new Error('Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
      }

      console.log(`üîç –ü–æ–ø—ã—Ç–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${email}`);
      console.log(`üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ: ${this.users.length}`);
      console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:`, this.users.map(u => ({ email: u.email, active: u.isActive })));

      const user = this.users.find(u => u.email === email && u.isActive);
      
      if (!user) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      const isPasswordValid = await AuthService.verifyPassword(password, user.password);
      
      if (!isPasswordValid) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å');
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
      user.lastLogin = new Date().toISOString();

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω
      const token = AuthService.generateToken(user.id, user.email, user.role);

      return {
        success: true,
        token,
        user: {
          id: user.id,
          email: user.email,
          name: user.name,
          role: user.role,
          lastLogin: user.lastLogin
        }
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async createUser(userData, creatorId) {
    try {
      const creator = this.users.find(u => u.id === creatorId);
      if (!creator || creator.role !== 'superadmin') {
        throw new Error('–¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      if (this.users.find(u => u.email === userData.email)) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      }

      // –í–∞–ª–∏–¥–∞—Ü–∏—è email
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(userData.email)) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email');
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä–æ–ª—å
      const password = AuthService.generateSecurePassword(16);
      const hashedPassword = await AuthService.hashPassword(password);

      const newUser = {
        id: Date.now(),
        email: userData.email.toLowerCase().trim(),
        name: userData.name.trim(),
        role: userData.role,
        password: hashedPassword,
        createdAt: new Date().toISOString(),
        lastLogin: null,
        isActive: true
      };

      this.users.push(newUser);

      return {
        success: true,
        user: {
          id: newUser.id,
          email: newUser.email,
          name: newUser.name,
          role: newUser.role,
          createdAt: newUser.createdAt
        },
        generatedPassword: password
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      throw error;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async updateUser(userId, updateData, updaterId) {
    try {
      const updater = this.users.find(u => u.id === updaterId);
      if (!updater || updater.role !== 'superadmin') {
        throw new Error('–¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
      }

      const userIndex = this.users.findIndex(u => u.id === userId);
      if (userIndex === -1) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      const user = this.users[userIndex];

      // –ó–∞—â–∏—Ç–∞ –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞
      if (user.role === 'superadmin' && userId !== updaterId) {
        throw new Error('–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ –¥—Ä—É–≥–æ–≥–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞');
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—è
      const allowedFields = ['name', 'email', 'role', 'isActive'];
      const updates = {};

      for (const field of allowedFields) {
        if (updateData[field] !== undefined) {
          if (field === 'email') {
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            if (!emailRegex.test(updateData[field])) {
              throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email');
            }
            updates[field] = updateData[field].toLowerCase().trim();
          } else if (field === 'name') {
            updates[field] = updateData[field].trim();
          } else {
            updates[field] = updateData[field];
          }
        }
      }

      this.users[userIndex] = { ...user, ...updates };

      return {
        success: true,
        user: {
          id: this.users[userIndex].id,
          email: this.users[userIndex].email,
          name: this.users[userIndex].name,
          role: this.users[userIndex].role,
          isActive: this.users[userIndex].isActive
        }
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      throw error;
    }
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async deleteUser(userId, deleterId) {
    try {
      const deleter = this.users.find(u => u.id === deleterId);
      if (!deleter || deleter.role !== 'superadmin') {
        throw new Error('–¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
      }

      const userToDelete = this.users.find(u => u.id === userId);
      if (!userToDelete) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      if (userToDelete.role === 'superadmin') {
        throw new Error('–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞');
      }

      this.users = this.users.filter(u => u.id !== userId);

      return {
        success: true,
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  getAllUsers(requesterId) {
    try {
      const requester = this.users.find(u => u.id === requesterId);
      if (!requester || requester.role !== 'superadmin') {
        throw new Error('–¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
      }

      return this.users.map(user => ({
        id: user.id,
        email: user.email,
        name: user.name,
        role: user.role,
        createdAt: user.createdAt,
        lastLogin: user.lastLogin,
        isActive: user.isActive
      }));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
      throw error;
    }
  }

  /**
   * –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è
   */
  async changePassword(userId, currentPassword, newPassword) {
    try {
      const user = this.users.find(u => u.id === userId);
      if (!user) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å
      const isCurrentPasswordValid = await AuthService.verifyPassword(currentPassword, user.password);
      if (!isCurrentPasswordValid) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å');
      }

      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
      const passwordValidation = AuthService.validatePasswordStrength(newPassword);
      if (!passwordValidation.isValid) {
        throw new Error(`–ü–∞—Ä–æ–ª—å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º: ${passwordValidation.errors.join(', ')}`);
      }

      // –•–µ—à–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
      const hashedNewPassword = await AuthService.hashPassword(newPassword);
      user.password = hashedNewPassword;

      return {
        success: true,
        message: '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω'
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è:', error);
      throw error;
    }
  }

  /**
   * –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–ª–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º)
   */
  async resetPassword(userId, reseterId) {
    try {
      const reseter = this.users.find(u => u.id === reseterId);
      if (!reseter || (reseter.role !== 'superadmin' && reseter.role !== 'full_access')) {
        throw new Error('–¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø–æ–ª–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º –º–æ–≥—É—Ç —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å –ø–∞—Ä–æ–ª–∏');
      }

      const userToReset = this.users.find(u => u.id === userId);
      if (!userToReset) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      // –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞
      if (userToReset.role === 'superadmin' && userId !== reseterId) {
        throw new Error('–ù–∏–∫—Ç–æ –Ω–µ –º–æ–∂–µ—Ç —Å–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞, –∫—Ä–æ–º–µ –Ω–µ–≥–æ —Å–∞–º–æ–≥–æ');
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä–æ–ª—å
      const newPassword = AuthService.generateSecurePassword(16);
      const hashedPassword = await AuthService.hashPassword(newPassword);

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userIndex = this.users.findIndex(u => u.id === userId);
      this.users[userIndex].password = hashedPassword;

      return {
        success: true,
        user: {
          id: userToReset.id,
          email: userToReset.email,
          name: userToReset.name,
          role: userToReset.role
        },
        newPassword: newPassword
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
   */
  getUserById(userId) {
    const user = this.users.find(u => u.id === userId);
    if (!user) {
      return null;
    }

    return {
      id: user.id,
      email: user.email,
      name: user.name,
      role: user.role,
      createdAt: user.createdAt,
      lastLogin: user.lastLogin,
      isActive: user.isActive
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
   */
  getInitializationStatus() {
    return this.isInitialized;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton
const userService = new UserService();
module.exports = userService;