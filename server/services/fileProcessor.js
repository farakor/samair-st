const fs = require('fs-extra');
const path = require('path');
const XLSX = require('xlsx');
const databaseService = require('./databaseService');

class FileProcessor {
  constructor() {
    this.uploadsDir = path.join(__dirname, '../data/uploads');
    fs.ensureDirSync(this.uploadsDir);
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ Excel —Å–µ—Ä–∏–π–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –¥–∞—Ç—ã –≤ –æ–±—ã—á–Ω—É—é –¥–∞—Ç—É
  excelSerialDateToJSDate(serial) {
    // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ —Å—Ç—Ä–æ–∫–∞ –¥–∞—Ç—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if (typeof serial === 'string' && isNaN(serial)) {
      return serial;
    }

    // –ï—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ (—Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä Excel)
    if (typeof serial === 'number' || !isNaN(serial)) {
      const serialNumber = Number(serial);

      // Excel –Ω–∞—á–∏–Ω–∞–µ—Ç –æ—Ç—Å—á—ë—Ç —Å 1 —è–Ω–≤–∞—Ä—è 1900 (—Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä 1)
      // –ï—Å—Ç—å –∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ Excel - –æ–Ω —Å—á–∏—Ç–∞–µ—Ç 1900 –≥–æ–¥ –≤–∏—Å–æ–∫–æ—Å–Ω—ã–º

      // –ë–∞–∑–æ–≤–∞—è –¥–∞—Ç–∞: 1 —è–Ω–≤–∞—Ä—è 1900 —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–µ—Ä–∏–π–Ω–æ–º—É –Ω–æ–º–µ—Ä—É 1
      let days = serialNumber - 1; // –í—ã—á–∏—Ç–∞–µ–º 1, —Ç–∞–∫ –∫–∞–∫ 1 —è–Ω–≤–∞—Ä—è 1900 = —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä 1

      // –ï—Å–ª–∏ —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –±–æ–ª—å—à–µ 59 (–ø–æ—Å–ª–µ 28 —Ñ–µ–≤—Ä–∞–ª—è 1900), 
      // –Ω—É–∂–Ω–æ –≤—ã—á–µ—Å—Ç—å –µ—â—ë 1 –¥–µ–Ω—å –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ Excel —Å 29 —Ñ–µ–≤—Ä–∞–ª—è 1900
      if (serialNumber > 59) {
        days = days - 1;
      }

      // –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—É –Ω–∞—á–∏–Ω–∞—è —Å 1 —è–Ω–≤–∞—Ä—è 1900, –∏–∑–±–µ–≥–∞—è –ø—Ä–æ–±–ª–µ–º —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏
      const baseDate = new Date(1900, 0, 1); // 1 —è–Ω–≤–∞—Ä—è 1900 –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
      const jsDate = new Date(baseDate.getFullYear(), baseDate.getMonth(), baseDate.getDate() + days);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –≤–∞–ª–∏–¥–Ω–∞
      if (isNaN(jsDate.getTime())) {
        console.warn('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –¥–∞—Ç—ã:', serialNumber);
        return serial.toString();
      }

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ —Ä–æ—Å—Å–∏–π—Å–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–∞—Ç—ã –Ω–∞–ø—Ä—è–º—É—é
      const day = jsDate.getDate().toString().padStart(2, '0');
      const month = (jsDate.getMonth() + 1).toString().padStart(2, '0');
      const year = jsDate.getFullYear();
      const formattedDate = `${day}.${month}.${year}`;

      console.log(`–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è: —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä ${serialNumber} ‚Üí –¥–∞—Ç–∞ ${formattedDate}`);
      return formattedDate;
    }

    return serial;
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ Excel —Ñ–æ—Ä–º–∞—Ç–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
  excelTimeToReadableTime(timeValue) {
    // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ —Å—Ç—Ä–æ–∫–∞ –≤—Ä–µ–º–µ–Ω–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if (typeof timeValue === 'string' && timeValue.includes(':')) {
      return timeValue;
    }

    // –ï—Å–ª–∏ —ç—Ç–æ –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    if (!timeValue || timeValue === '') {
      return '';
    }

    // –ï—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ (–¥–æ–ª—è –¥–Ω—è –≤ Excel)
    if (typeof timeValue === 'number' || !isNaN(timeValue)) {
      const timeDecimal = Number(timeValue);

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç (timeDecimal * 24 —á–∞—Å–∞ * 60 –º–∏–Ω—É—Ç)
      const totalMinutes = Math.round(timeDecimal * 24 * 60);

      // –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã
      const hours = Math.floor(totalMinutes / 60);
      const minutes = totalMinutes % 60;

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∫ HH:MM
      const formattedTime = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;

      console.log(`–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏: ${timeDecimal} ‚Üí ${formattedTime}`);
      return formattedTime;
    }

    return timeValue.toString();
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ Excel —Ñ–∞–π–ª–∞ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ FilesContext)
  async parseExcelFile(filePath, originalName) {
    return new Promise(async (resolve, reject) => {
      console.log(`–ü–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–∞: ${originalName}`);

      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if (!require('fs').existsSync(filePath)) {
          throw new Error(`–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
        }
        
        const data = require('fs-extra').readFileSync(filePath);
        const workbook = require('xlsx').read(data, { type: 'buffer', cellDates: false });

        if (!workbook.SheetNames || workbook.SheetNames.length === 0) {
          throw new Error('–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏—Å—Ç–æ–≤ Excel');
        }

        // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç
        const firstSheetName = workbook.SheetNames[0];
        const worksheet = workbook.Sheets[firstSheetName];

        if (!worksheet) {
          throw new Error(`–õ–∏—Å—Ç "${firstSheetName}" –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω`);
        }

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JSON
        const jsonData = require('xlsx').utils.sheet_to_json(worksheet, { header: 1 });

        if (jsonData.length < 4) {
          console.log(`–§–∞–π–ª ${originalName} —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–Ω–µ–µ 4 —Å—Ç—Ä–æ–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤`);
          resolve([]);
          return;
        }

        // –ù–∞—á–∏–Ω–∞–µ–º —Å 3-–π —Å—Ç—Ä–æ–∫–∏ (–∏–Ω–¥–µ–∫—Å 2) - —ç—Ç–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
        // –î–∞–Ω–Ω—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 4-–π —Å—Ç—Ä–æ–∫–∏ (–∏–Ω–¥–µ–∫—Å 3)
        const flights = jsonData.slice(3).map((row, index) => {
          if (!row || row.length === 0 || !row[2]) {
            return null; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –¥–∞—Ç—ã
          }

          // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏–∑ Excel —Å–µ—Ä–∏–π–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ (–∫–æ–ª–æ–Ω–∫–∞ C - –∏–Ω–¥–µ–∫—Å 2)
          const convertedDate = this.excelSerialDateToJSDate(row[2]);

          return {
            id: `flight_${originalName}_${index}`,
            number: row[1] || '',         // –ö–æ–ª–æ–Ω–∫–∞ B - –Ω–æ–º–µ—Ä —Ä–µ–π—Å–∞
            date: convertedDate,          // –ö–æ–ª–æ–Ω–∫–∞ C - –¥–∞—Ç–∞  
            aircraftType: row[3] || '',   // –ö–æ–ª–æ–Ω–∫–∞ D - —Ç–∏–ø –í–°
            departure: row[4] || '',      // –ö–æ–ª–æ–Ω–∫–∞ E - –≤—ã–ª–µ—Ç
            arrival: row[5] || '',        // –ö–æ–ª–æ–Ω–∫–∞ F - –ø—Ä–∏–ª–µ—Ç
            departureTime: this.excelTimeToReadableTime(row[6]),  // –ö–æ–ª–æ–Ω–∫–∞ G - –≤—Ä–µ–º—è –æ—Ç–ø—Ä(—Ñ–∞–∫—Ç)
            arrivalTime: this.excelTimeToReadableTime(row[7]),    // –ö–æ–ª–æ–Ω–∫–∞ H - –≤—Ä–µ–º—è –ø—Ä–∏–±(—Ñ–∞–∫—Ç)
            flightTime: this.excelTimeToReadableTime(row[8]),     // –ö–æ–ª–æ–Ω–∫–∞ I - –≤—Ä–µ–º—è –≤ –ø—É—Ç–∏(—Ñ–∞–∫—Ç)
            configuration: row[9] || '',  // –ö–æ–ª–æ–Ω–∫–∞ J - –∫–æ–º–ø–æ–Ω–æ–≤–∫–∞
            passengers: row[10] || '',    // –ö–æ–ª–æ–Ω–∫–∞ K - ADLT+CHLD+INF
            paxPercentage: row[11] || '', // –ö–æ–ª–æ–Ω–∫–∞ L - % PAX
            baggage: row[12] || '',       // –ö–æ–ª–æ–Ω–∫–∞ M - –±–∞–≥. –∫–≥.
            crew: row[13] || '',          // –ö–æ–ª–æ–Ω–∫–∞ N - –ª–µ—Ç—á–∏–∫–∏
            sourceFile: originalName,
            uploadedAt: Date.now(),
            source: 'email' // –£–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
          };
        }).filter(flight => flight !== null && flight.date && flight.date !== 'Invalid Date');

        console.log(`–ò–∑–≤–ª–µ—á–µ–Ω–æ ${flights.length} —Ä–µ–π—Å–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ ${originalName}`);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–π—Å–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if (flights.length > 0) {
          try {
            const databaseService = require('./databaseService');
            await databaseService.saveFlightData(flights);
            console.log(`–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${flights.length} —Ä–µ–π—Å–æ–≤ –≤ PostgreSQL`);
          } catch (dbError) {
            console.error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:`, dbError.message);
            // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
          }
        }
        
        resolve(flights);
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ Excel —Ñ–∞–π–ª–∞ ${originalName}:`, error.message);
        reject(error);
      }
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –∏–∑ –ø–æ—á—Ç—ã
  async processEmailFile(metadata) {
    try {
      console.log(`üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª –∏–∑ –ø–æ—á—Ç—ã: ${metadata.originalName}`);
      
      // –ü–∞—Ä—Å–∏–º Excel —Ñ–∞–π–ª
      const flights = await this.parseExcelFile(metadata.filepath, metadata.originalName);
      console.log(`üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ ${flights.length} —Ä–µ–π—Å–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ ${metadata.originalName}`);
      
      // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ FilesContext
      const fileInfo = {
        id: Date.now() + Math.random(),
        date: new Date().toLocaleDateString('ru-RU'),
        fileName: metadata.originalName,
        size: this.formatFileSize(metadata.size),
        author: `üìß ${metadata.emailFrom}`,
        uploadedAt: Date.now(),
        status: 'completed',
        flightsCount: flights.length,
        source: 'email',
        emailSubject: metadata.emailSubject,
        emailDate: metadata.emailDate
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –≤ PostgreSQL
      try {
        const databaseService = require('./databaseService');
        await databaseService.saveFileInfo(fileInfo);
        console.log(`‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ ${metadata.originalName} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ PostgreSQL`);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–π—Å–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if (flights.length > 0) {
          console.log(`üíæ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ${flights.length} —Ä–µ–π—Å–æ–≤ –≤ PostgreSQL...`);
          
          // –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ —Ä–µ–π—Å–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
          console.log(`üìù –ü—Ä–∏–º–µ—Ä –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–π—Å–∞:`, {
            id: flights[0].id,
            number: flights[0].number,
            date: flights[0].date,
            departure: flights[0].departure,
            arrival: flights[0].arrival,
            sourceFile: flights[0].sourceFile
          });
          
          if (flights.length > 1) {
            console.log(`üìù –ü—Ä–∏–º–µ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–π—Å–∞:`, {
              id: flights[flights.length - 1].id,
              number: flights[flights.length - 1].number,
              date: flights[flights.length - 1].date,
              sourceFile: flights[flights.length - 1].sourceFile
            });
          }
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–π—Å—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
          await databaseService.saveFlightData(flights);
          console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${flights.length} —Ä–µ–π—Å–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ ${metadata.originalName}`);
        } else {
          console.log(`‚ö†Ô∏è –§–∞–π–ª ${metadata.originalName} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–π—Å–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è`);
        }
      } catch (dbError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ PostgreSQL:', dbError);
        console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', dbError.message);
        console.error('‚ùå –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', dbError.stack);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–∞ –Ω–∞ –æ—à–∏–±–∫—É
        fileInfo.status = 'error';
        fileInfo.error = dbError.message;
        
        // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
        try {
          await databaseService.saveFileInfo(fileInfo);
        } catch (secondaryError) {
          console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ:', secondaryError);
        }
        
        throw dbError; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
      }

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      return {
        fileInfo,
        flights,
        success: true
      };

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ ${metadata.originalName}:`, error);
      console.error(`‚ùå –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:`, error.stack);
      
      const fileInfo = {
        id: Date.now() + Math.random(),
        date: new Date().toLocaleDateString('ru-RU'),
        fileName: metadata.originalName,
        size: this.formatFileSize(metadata.size),
        author: `üìß ${metadata.emailFrom}`,
        uploadedAt: Date.now(),
        status: 'error',
        error: error.message,
        source: 'email',
        emailSubject: metadata.emailSubject,
        emailDate: metadata.emailDate
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ –≤ PostgreSQL
      try {
        const databaseService = require('./databaseService');
        await databaseService.saveFileInfo(fileInfo);
        console.log(`‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ —Ñ–∞–π–ª–∞ ${metadata.originalName} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ PostgreSQL`);
      } catch (dbError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—à–∏–±–∫–µ –≤ PostgreSQL:', dbError);
      }
      
      return {
        fileInfo,
        flights: [],
        success: false,
        error: error.message
      };
    }
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
  formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–æ—á—Ç—ã (—Ç–æ–ª—å–∫–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ)
  async getProcessedEmailFiles() {
    try {
      const emailService = require('./emailService');
      const emailFiles = await emailService.getEmailFiles();
      
      const fileInfos = [];
      
      for (const metadata of emailFiles) {
        // –°–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        const fileInfo = {
          id: `email_${metadata.processedAt}`,
          originalName: metadata.originalName,
          size: this.formatFileSize(metadata.size),
          emailFrom: metadata.emailFrom,
          emailSubject: metadata.emailSubject,
          emailDate: metadata.emailDate,
          processedAt: metadata.processedAt,
          status: metadata.status || 'completed',
          flightsCount: metadata.flightsCount || 0,
          error: metadata.error
        };
        
        fileInfos.push(fileInfo);
      }
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
      fileInfos.sort((a, b) => new Date(b.processedAt) - new Date(a.processedAt));
      
      return fileInfos;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–∞—Ö –∏–∑ –ø–æ—á—Ç—ã:', error);
      return [];
    }
  }
}

module.exports = new FileProcessor(); 