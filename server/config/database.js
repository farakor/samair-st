const { Pool } = require('pg');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const dbConfig = {
  host: process.env.DB_HOST || 'localhost',
  port: process.env.DB_PORT || 5432,
  database: process.env.DB_NAME || 'samair_db',
  user: process.env.DB_USER || 'samair_user',
  password: process.env.DB_PASSWORD || 'samair_password',
  max: 20, // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –≤ –ø—É–ª–µ
  idleTimeoutMillis: 30000, // –∑–∞–∫—Ä—ã—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ—Å–ª–µ 30 —Å–µ–∫—É–Ω–¥ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è
  connectionTimeoutMillis: 2000, // –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
};

// –°–æ–∑–¥–∞–µ–º –ø—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
const pool = new Pool(dbConfig);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
pool.on('error', (err) => {
  console.error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ PostgreSQL:', err);
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
const query = async (text, params) => {
  const client = await pool.connect();
  try {
    const result = await client.query(text, params);
    return result;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:', error);
    throw error;
  } finally {
    client.release();
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const initDatabase = async () => {
  try {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL...');
    const connectionTest = await query('SELECT NOW()');
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ:', connectionTest.rows[0]);
    
    console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã uploaded_files...');
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ñ–∞–π–ª–æ–≤
    await query(`
      CREATE TABLE IF NOT EXISTS uploaded_files (
        id SERIAL PRIMARY KEY,
        file_id VARCHAR(255) UNIQUE NOT NULL,
        date VARCHAR(50),
        file_name VARCHAR(255) NOT NULL,
        size VARCHAR(50),
        author VARCHAR(255),
        uploaded_at BIGINT,
        status VARCHAR(50) DEFAULT 'processing',
        flights_count INTEGER DEFAULT 0,
        error_message TEXT,
        source VARCHAR(50) DEFAULT 'manual',
        file_info JSONB,
        email_subject TEXT,
        email_date VARCHAR(50),
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ uploaded_files —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞');

    console.log('üîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –≤ uploaded_files...');
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç (–º–∏–≥—Ä–∞—Ü–∏—è)
    await query(`
      ALTER TABLE uploaded_files 
      ADD COLUMN IF NOT EXISTS email_subject TEXT,
      ADD COLUMN IF NOT EXISTS email_date VARCHAR(50)
    `);
    console.log('‚úÖ –ö–æ–ª–æ–Ω–∫–∏ email_subject –∏ email_date –¥–æ–±–∞–≤–ª–µ–Ω—ã/–ø—Ä–æ–≤–µ—Ä–µ–Ω—ã');

    console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã flight_data...');
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ–π—Å–æ–≤
    await query(`
      CREATE TABLE IF NOT EXISTS flight_data (
        id SERIAL PRIMARY KEY,
        flight_id VARCHAR(255) UNIQUE NOT NULL,
        number VARCHAR(100),
        date VARCHAR(50),
        aircraft_type VARCHAR(100),
        departure VARCHAR(100),
        arrival VARCHAR(100),
        departure_time VARCHAR(50),
        arrival_time VARCHAR(50),
        flight_time VARCHAR(50),
        configuration VARCHAR(200),
        passengers VARCHAR(100),
        pax_percentage VARCHAR(50),
        baggage VARCHAR(100),
        crew TEXT,
        source_file VARCHAR(255),
        uploaded_at BIGINT,
        source VARCHAR(50) DEFAULT 'manual',
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ flight_data —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞');

    console.log('üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –≤ flight_data...');
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–µ (–º–∏–≥—Ä–∞—Ü–∏—è)
    await query(`
      ALTER TABLE flight_data 
      ALTER COLUMN configuration TYPE VARCHAR(200),
      ALTER COLUMN passengers TYPE VARCHAR(100),
      ALTER COLUMN baggage TYPE VARCHAR(100),
      ALTER COLUMN crew TYPE TEXT
    `);
    console.log('‚úÖ –ö–æ–ª–æ–Ω–∫–∏ –≤ flight_data –æ–±–Ω–æ–≤–ª–µ–Ω—ã');

    console.log('üìÇ –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤...');
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
    await query(`
      CREATE INDEX IF NOT EXISTS idx_flight_data_date ON flight_data(date);
      CREATE INDEX IF NOT EXISTS idx_flight_data_aircraft_type ON flight_data(aircraft_type);
      CREATE INDEX IF NOT EXISTS idx_flight_data_departure ON flight_data(departure);
      CREATE INDEX IF NOT EXISTS idx_flight_data_arrival ON flight_data(arrival);
      CREATE INDEX IF NOT EXISTS idx_flight_data_source_file ON flight_data(source_file);
      CREATE INDEX IF NOT EXISTS idx_uploaded_files_file_id ON uploaded_files(file_id);
    `);
    console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã/–ø—Ä–æ–≤–µ—Ä–µ–Ω—ã');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...');
    const tablesResult = await query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' AND table_name IN ('uploaded_files', 'flight_data')
    `);
    
    const existingTables = tablesResult.rows.map(row => row.table_name);
    console.log('üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã:', existingTables);
    
    if (existingTables.includes('uploaded_files') && existingTables.includes('flight_data')) {
      console.log('‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç');
    } else {
      console.error('‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö
    const filesCount = await query('SELECT COUNT(*) as count FROM uploaded_files');
    const flightsCount = await query('SELECT COUNT(*) as count FROM flight_data');
    
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:`);
    console.log(`   - –§–∞–π–ª–æ–≤ –≤ –±–∞–∑–µ: ${filesCount.rows[0].count}`);
    console.log(`   - –†–µ–π—Å–æ–≤ –≤ –±–∞–∑–µ: ${flightsCount.rows[0].count}`);

    console.log('üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
    console.error('‚ùå –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
    throw error;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
const testConnection = async () => {
  try {
    const result = await query('SELECT NOW()');
    console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ:', result.rows[0]);
    return true;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL:', error);
    return false;
  }
};

module.exports = {
  pool,
  query,
  initDatabase,
  testConnection
}; 