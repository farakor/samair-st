require('dotenv').config({ path: require('path').join(__dirname, '.env') });
const express = require('express');
const cors = require('cors');
const fs = require('fs-extra');
const path = require('path');
const cron = require('node-cron');
const emailService = require('./services/emailService');
const fileProcessor = require('./services/fileProcessor');
const { initDatabase, testConnection, query } = require('./config/database');
const databaseService = require('./services/databaseService');

const app = express();
const PORT = process.env.PORT || 3001;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
const dataDir = path.join(__dirname, 'data');
const uploadsDir = path.join(dataDir, 'uploads');
const configDir = path.join(dataDir, 'config');

fs.ensureDirSync(uploadsDir);
fs.ensureDirSync(configDir);

// API –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—á—Ç—ã
app.get('/api/email-config', (req, res) => {
  try {
    const configPath = path.join(configDir, 'email.json');
    if (fs.existsSync(configPath)) {
      const config = fs.readJsonSync(configPath);
      // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –æ–±—Ä–∞—Ç–Ω–æ
      const safeConfig = { ...config };
      delete safeConfig.password;
      res.json(safeConfig);
    } else {
      res.json({});
    }
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ—á—Ç—ã' });
  }
});

app.post('/api/email-config', (req, res) => {
  try {
    const config = req.body;
    const configPath = path.join(configDir, 'email.json');
    fs.writeJsonSync(configPath, config, { spaces: 2 });
    res.json({ success: true, message: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—á—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã' });
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ—á—Ç—ã' });
  }
});

// API –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–æ—á—Ç–µ
app.post('/api/test-email-connection', async (req, res) => {
  try {
    const config = req.body;
    const result = await emailService.testConnection(config);
    res.json(result);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// API –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SMTP
app.get('/api/smtp-config', (req, res) => {
  try {
    const configPath = path.join(configDir, 'smtp.json');
    if (fs.existsSync(configPath)) {
      const config = fs.readJsonSync(configPath);
      // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –æ–±—Ä–∞—Ç–Ω–æ
      const safeConfig = { ...config };
      delete safeConfig.password;
      res.json(safeConfig);
    } else {
      res.json({});
    }
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ SMTP –Ω–∞—Å—Ç—Ä–æ–µ–∫' });
  }
});

app.post('/api/smtp-config', (req, res) => {
  try {
    const config = req.body;
    emailService.saveSMTPConfig(config);
    res.json({ success: true, message: 'SMTP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã' });
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ SMTP –Ω–∞—Å—Ç—Ä–æ–µ–∫' });
  }
});

// API –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è SMTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
app.post('/api/test-smtp-connection', async (req, res) => {
  try {
    const config = req.body;
    const result = await emailService.testSMTPConnection(config);
    res.json(result);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–∏—Å—å–º–∞
app.post('/api/send-welcome-email', async (req, res) => {
  try {
    const { userEmail, userName, password } = req.body;
    
    if (!userEmail || !userName || !password) {
      return res.status(400).json({ 
        error: '–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø–µ—Ä–µ–¥–∞–Ω—ã (userEmail, userName, password)' 
      });
    }

    const result = await emailService.sendWelcomeEmail(userEmail, userName, password);
    res.json(result);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–∏—Å—å–º–∞:', error);
    res.status(500).json({ error: error.message });
  }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ –ø–æ—á—Ç—ã
app.get('/api/email-logs', (req, res) => {
  try {
    const logsPath = path.join(configDir, 'email-logs.json');
    if (fs.existsSync(logsPath)) {
      const logs = fs.readJsonSync(logsPath);
      res.json(logs);
    } else {
      res.json([]);
    }
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–æ–≥–æ–≤' });
  }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–±–æ—Ä–∞
app.get('/api/email-status', (req, res) => {
  try {
    const statusPath = path.join(configDir, 'email-status.json');
    if (fs.existsSync(statusPath)) {
      const status = fs.readJsonSync(statusPath);
      res.json(status);
    } else {
      res.json({ 
        isEnabled: false,
        lastRun: null,
        nextRun: null,
        totalEmails: 0,
        totalFiles: 0
      });
    }
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç—É—Å–∞' });
  }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–æ—á—Ç—ã
app.get('/api/email-files', async (req, res) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const allFiles = await databaseService.getAllFiles();
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã –∏–∑ –ø–æ—á—Ç—ã –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç
    const emailFiles = allFiles
      .filter(file => file.source === 'email')
      .map(file => {
        // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã
        let processedAt;
        try {
          if (file.uploadedAt && !isNaN(file.uploadedAt)) {
            processedAt = new Date(file.uploadedAt).toISOString();
          } else {
            processedAt = new Date().toISOString(); // fallback –Ω–∞ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
          }
        } catch (dateError) {
          processedAt = new Date().toISOString();
        }
        
        return {
          id: file.id,
          originalName: file.fileName,
          size: file.size,
          emailFrom: (file.author || '').replace('üìß ', '') || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
          emailSubject: file.emailSubject || '–ë–µ–∑ —Ç–µ–º—ã',
          emailDate: file.emailDate || file.date,
          processedAt: processedAt,
          status: file.status || 'completed',
          flightsCount: file.flightsCount || 0,
          error: file.error
        };
      });
    
    res.json(emailFiles);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–æ—á—Ç—ã:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–æ—á—Ç—ã' });
  }
});

// API –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º –∏–∑ –ø–æ—á—Ç—ã
app.post('/api/fetch-emails-manual', async (req, res) => {
  try {
    console.log('–ó–∞–ø—É—Å–∫ —Ä—É—á–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∏—Å–µ–º –∏–∑ –ø–æ—á—Ç—ã...');
    
    const result = await emailService.fetchEmailsWithAttachments();
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã
    const newFiles = result.processedFiles.filter(f => f.isNew).length;
    const existingFiles = result.processedFiles.filter(f => !f.isNew).length;
    
    let message = `–ü–æ–ª—É—á–µ–Ω–æ ${result.totalEmails} –ø–∏—Å–µ–º`;
    if (newFiles > 0) {
      message += `, –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${newFiles} –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤`;
    }
    if (existingFiles > 0) {
      message += `, –Ω–∞–π–¥–µ–Ω–æ ${existingFiles} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤`;
    }
    if (newFiles === 0 && existingFiles === 0) {
      message += ', —Ñ–∞–π–ª—ã —Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã';
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    try {
      const statusPath = path.join(configDir, 'email-status.json');
      const currentStatus = fs.existsSync(statusPath) ? fs.readJsonSync(statusPath) : {};
      const updatedStatus = {
        ...currentStatus,
        isEnabled: true,
        lastRun: new Date().toISOString(),
        nextRun: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),
        totalEmails: (currentStatus.totalEmails || 0) + (result.totalEmails || 0),
        totalFiles: (currentStatus.totalFiles || 0) + newFiles
      };
      fs.writeJsonSync(statusPath, updatedStatus, { spaces: 2 });
      console.log('‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞');
    } catch (statusError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', statusError);
    }
    
    res.json({
      success: true,
      message: message,
      data: result
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä—É—á–Ω–æ–º –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∏—Å–µ–º:', error);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å –æ—à–∏–±–∫–æ–π –ø—Ä–∏ —Ä—É—á–Ω–æ–º –∑–∞–ø—É—Å–∫–µ
    try {
      const statusPath = path.join(configDir, 'email-status.json');
      const currentStatus = fs.existsSync(statusPath) ? fs.readJsonSync(statusPath) : {};
      const errorStatus = {
        ...currentStatus,
        isEnabled: true,
        lastRun: new Date().toISOString(),
        nextRun: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),
        lastError: error.message
      };
      fs.writeJsonSync(statusPath, errorStatus, { spaces: 2 });
    } catch (statusError) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', statusError);
    }
    
    res.status(500).json({ 
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∏—Å–µ–º –∏–∑ –ø–æ—á—Ç—ã',
      details: error.message 
    });
  }
});

// API –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
app.get('/api/database-diagnostics', async (req, res) => {
  try {
    console.log('üîç –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const connectionTest = await query('SELECT NOW()');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
    const tablesResult = await query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' AND table_name IN ('uploaded_files', 'flight_data')
    `);
    
    const existingTables = tablesResult.rows.map(row => row.table_name);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const [filesCount, flightsCount] = await Promise.all([
      query('SELECT COUNT(*) as count FROM uploaded_files'),
      query('SELECT COUNT(*) as count FROM flight_data')
    ]);
    
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
    const [sampleFiles, sampleFlights] = await Promise.all([
      query('SELECT * FROM uploaded_files ORDER BY created_at DESC LIMIT 5'),
      query('SELECT * FROM flight_data ORDER BY created_at DESC LIMIT 5')
    ]);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
    const sourceStats = await query(`
      SELECT source, COUNT(*) as count 
      FROM uploaded_files 
      GROUP BY source
    `);
    
    const flightSourceStats = await query(`
      SELECT source, COUNT(*) as count 
      FROM flight_data 
      GROUP BY source
    `);
    
    const diagnostics = {
      database: {
        connected: true,
        connectionTime: connectionTest.rows[0],
        tables: existingTables,
        allTablesExist: existingTables.includes('uploaded_files') && existingTables.includes('flight_data')
      },
      statistics: {
        totalFiles: parseInt(filesCount.rows[0].count),
        totalFlights: parseInt(flightsCount.rows[0].count),
        filesBySource: sourceStats.rows.reduce((acc, row) => {
          acc[row.source] = parseInt(row.count);
          return acc;
        }, {}),
        flightsBySource: flightSourceStats.rows.reduce((acc, row) => {
          acc[row.source] = parseInt(row.count);
          return acc;
        }, {})
      },
      samples: {
        recentFiles: sampleFiles.rows.map(file => ({
          id: file.file_id,
          fileName: file.file_name,
          source: file.source,
          status: file.status,
          flightsCount: file.flights_count,
          createdAt: file.created_at
        })),
        recentFlights: sampleFlights.rows.map(flight => ({
          id: flight.flight_id,
          number: flight.number,
          date: flight.date,
          departure: flight.departure,
          arrival: flight.arrival,
          source: flight.source,
          sourceFile: flight.source_file,
          createdAt: flight.created_at
        }))
      }
    };
    
    console.log('‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    res.json({
      success: true,
      data: diagnostics
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
      details: error.message,
      database: {
        connected: false
      }
    });
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–±–æ—Ä–∞
const initializeEmailStatus = () => {
  try {
    const statusPath = path.join(configDir, 'email-status.json');
    
    if (!fs.existsSync(statusPath)) {
      console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–±–æ—Ä–∞...');
      const initialStatus = {
        isEnabled: true,
        lastRun: null,
        nextRun: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),
        totalEmails: 0,
        totalFiles: 0
      };
      fs.writeJsonSync(statusPath, initialStatus, { spaces: 2 });
      console.log('‚úÖ –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–±–æ—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } else {
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞
      const currentStatus = fs.readJsonSync(statusPath);
      currentStatus.nextRun = new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString();
      currentStatus.isEnabled = true;
      fs.writeJsonSync(statusPath, currentStatus, { spaces: 2 });
      console.log('‚úÖ –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–±–æ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
  }
};

// –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∏—Å–µ–º (–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00)
cron.schedule('0 9 * * *', async () => {
  console.log('–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∏—Å–µ–º...');
  try {
    const result = await emailService.fetchEmailsWithAttachments();
    console.log('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–∏—Å–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–æ:', result);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    const statusPath = path.join(configDir, 'email-status.json');
    const status = {
      isEnabled: true,
      lastRun: new Date().toISOString(),
      nextRun: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),
      totalEmails: result.totalEmails || 0,
      totalFiles: result.totalFiles || 0
    };
    fs.writeJsonSync(statusPath, status, { spaces: 2 });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∏—Å–µ–º:', error);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å –æ—à–∏–±–∫–æ–π
    try {
      const statusPath = path.join(configDir, 'email-status.json');
      const currentStatus = fs.existsSync(statusPath) ? fs.readJsonSync(statusPath) : {};
      const errorStatus = {
        ...currentStatus,
        isEnabled: true,
        lastRun: new Date().toISOString(),
        nextRun: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),
        lastError: error.message,
        totalEmails: currentStatus.totalEmails || 0,
        totalFiles: currentStatus.totalFiles || 0
      };
      fs.writeJsonSync(statusPath, errorStatus, { spaces: 2 });
    } catch (statusError) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', statusError);
    }
  }
});

// API endpoints –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
app.get('/api/files', async (req, res) => {
  try {
    const files = await databaseService.getAllFiles();
    res.json(files);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–π—Å–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
app.get('/api/flight-data', async (req, res) => {
  try {
    const filters = {
      dateFrom: req.query.dateFrom,
      dateTo: req.query.dateTo,
      aircraftType: req.query.aircraftType,
      airport: req.query.airport
    };
    
    const flights = await databaseService.getFlightData(filters);
    res.json(flights);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ–π—Å–æ–≤:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ–π—Å–æ–≤' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
app.get('/api/stats', async (req, res) => {
  try {
    const stats = await databaseService.getFlightStats();
    res.json(stats);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏' });
  }
});

// –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
app.delete('/api/files/:fileId', async (req, res) => {
  try {
    await databaseService.deleteFile(req.params.fileId);
    res.json({ success: true });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞' });
  }
});

// –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
app.delete('/api/clear-all', async (req, res) => {
  try {
    await databaseService.clearAllData();
    res.json({ success: true });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö' });
  }
});

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–π—Å–æ–≤
app.post('/api/flight-data', async (req, res) => {
  try {
    await databaseService.saveFlightData(req.body.flights);
    res.json({ success: true });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ–π—Å–æ–≤:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ–π—Å–æ–≤' });
  }
});

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ
app.post('/api/files', async (req, res) => {
  try {
    const savedFile = await databaseService.saveFileInfo(req.body.fileInfo);
    res.json(savedFile);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ' });
  }
});

// API –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤ –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –≤ PostgreSQL
app.post('/api/sync-files-to-db', async (req, res) => {
  try {
    console.log('üîÑ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤ –≤ PostgreSQL...');
    
    // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
    const emailFiles = await emailService.getEmailFiles();
    console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ: ${emailFiles.length}`);
    
    let syncedCount = 0;
    let skippedCount = 0;
    
    for (const fileMetadata of emailFiles) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª –≤ PostgreSQL
        const existingFile = await databaseService.getFileByName(fileMetadata.originalName);
        
        if (!existingFile) {
          // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è PostgreSQL
          const fileInfo = {
            id: Date.now() + Math.random() + syncedCount,
            date: new Date(fileMetadata.processedAt).toLocaleDateString('ru-RU'),
            fileName: fileMetadata.originalName,
            size: fileProcessor.formatFileSize(fileMetadata.size),
            author: `üìß ${fileMetadata.emailFrom}`,
            uploadedAt: new Date(fileMetadata.processedAt).getTime(),
            status: fileMetadata.status || 'completed',
            flightsCount: fileMetadata.flightsCount || 0,
            source: 'email',
            emailSubject: fileMetadata.emailSubject,
            emailDate: fileMetadata.emailDate
          };
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ PostgreSQL
          await databaseService.saveFileInfo(fileInfo);
          
          // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–µ–π—Å–æ–≤, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ
          if (fileMetadata.filepath && fs.existsSync(fileMetadata.filepath)) {
            try {
              const flights = await fileProcessor.parseExcelFile(fileMetadata.filepath, fileMetadata.originalName);
              if (flights && flights.length > 0) {
                await databaseService.saveFlightData(flights);
                console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Ñ–∞–π–ª ${fileMetadata.originalName} —Å ${flights.length} —Ä–µ–π—Å–∞–º–∏`);
              }
            } catch (parseError) {
              console.error(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–∞–π–ª–∞ ${fileMetadata.originalName}:`, parseError);
            }
          }
          
          syncedCount++;
        } else {
          skippedCount++;
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞ ${fileMetadata.originalName}:`, error);
      }
    }
    
    console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${syncedCount}, –ø—Ä–æ–ø—É—â–µ–Ω–æ ${skippedCount}`);
    
    res.json({
      success: true,
      message: `–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${syncedCount}, –ø—Ä–æ–ø—É—â–µ–Ω–æ ${skippedCount}`,
      data: {
        syncedCount,
        skippedCount,
        totalFiles: emailFiles.length
      }
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if (process.env.NODE_ENV === 'production') {
  app.use(express.static(path.join(__dirname, '../build')));
  
  app.get('*', (req, res) => {
    res.sendFile(path.join(__dirname, '../build', 'index.html'));
  });
}

app.listen(PORT, async () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  const dbConnected = await testConnection();
  if (dbConnected) {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await initDatabase();
  } else {
    console.warn('–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL');
  }
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–±–æ—Ä–∞
  initializeEmailStatus();
  
  console.log('–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–∏—Å–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ 9:00 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å');
});

module.exports = app; 