const express = require('express');
const { body, validationResult } = require('express-validator');
const rateLimit = require('express-rate-limit');
const AuthService = require('../services/authService');
const userService = require('../services/userService');
const emailService = require('../services/emailService');

const router = express.Router();

// Rate limiting –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Å–ª–∞–±–ª–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
const authLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
  max: 50, // –º–∞–∫—Å–∏–º—É–º 50 –ø–æ–ø—ã—Ç–æ–∫ –∑–∞ 15 –º–∏–Ω—É—Ç (–≤—Ä–µ–º–µ–Ω–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  message: {
    error: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç.',
    retryAfter: 15 * 60
  },
  standardHeaders: true,
  legacyHeaders: false,
  handler: (req, res) => {
    res.status(429).json({
      error: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç.',
      retryAfter: 15 * 60
    });
  }
});

// Rate limiting –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const createUserLimiter = rateLimit({
  windowMs: 60 * 60 * 1000, // 1 —á–∞—Å
  max: 10, // –º–∞–∫—Å–∏–º—É–º 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Å
  message: {
    error: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ —á–∞—Å.',
    retryAfter: 60 * 60
  }
});

// –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è –≤—Ö–æ–¥–∞
const loginValidation = [
  body('email')
    .isEmail()
    .normalizeEmail()
    .withMessage('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email'),
  body('password')
    .isLength({ min: 1 })
    .withMessage('–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω')
];

// –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const createUserValidation = [
  body('email')
    .isEmail()
    .normalizeEmail()
    .withMessage('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email'),
  body('name')
    .isLength({ min: 2, max: 100 })
    .trim()
    .escape()
    .withMessage('–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤'),
  body('role')
    .isIn(['superadmin', 'full_access', 'read_only'])
    .withMessage('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Ä–æ–ª—å')
];

// –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è
const changePasswordValidation = [
  body('currentPassword')
    .isLength({ min: 1 })
    .withMessage('–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'),
  body('newPassword')
    .isLength({ min: 8 })
    .matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*(),.?":{}|<>])/)
    .withMessage('–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤, –≤–∫–ª—é—á–∞—è –∑–∞–≥–ª–∞–≤–Ω—ã–µ –∏ —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã')
];

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */
const handleValidationErrors = (req, res, next) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).json({
      error: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
      details: errors.array()
    });
  }
  next();
};

/**
 * POST /auth/login - –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
 */
router.post('/login', loginValidation, handleValidationErrors, async (req, res) => {
  try {
    const { email, password } = req.body;

    // –î–æ–∂–∏–¥–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    let attempts = 0;
    while (!userService.getInitializationStatus() && attempts < 50) {
      await new Promise(resolve => setTimeout(resolve, 100));
      attempts++;
    }

    if (!userService.getInitializationStatus()) {
      return res.status(500).json({
        success: false,
        error: '–°–∏—Å—Ç–µ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞'
      });
    }

    console.log('üîê –°–µ—Ä–≤–∏—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≥–æ—Ç–æ–≤, –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞...');
    console.log('üìß –ü–æ–ª—É—á–µ–Ω email –≤ –∑–∞–ø—Ä–æ—Å–µ:', JSON.stringify(email));
    console.log('üìß –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö email:', typeof email);
    console.log('üìß –î–ª–∏–Ω–∞ email:', email.length);
    console.log('üìß Email –ø–æ–±–∞–π—Ç–æ–≤–æ:', Array.from(email).map(c => c.charCodeAt(0)));
    const result = await userService.authenticateUser(email, password);

    if (result.success) {
      res.json({
        success: true,
        message: '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É',
        token: result.token,
        user: result.user
      });
    } else {
      res.status(401).json({
        success: false,
        error: result.error
      });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
    res.status(500).json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

/**
 * POST /auth/verify - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
 */
router.post('/verify', (req, res) => {
  try {
    const { token } = req.body;

    if (!token) {
      return res.status(400).json({
        success: false,
        error: '–¢–æ–∫–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
      });
    }

    const decoded = AuthService.verifyToken(token);
    const user = userService.getUserById(decoded.userId);

    if (!user || !user.isActive) {
      return res.status(401).json({
        success: false,
        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'
      });
    }

    res.json({
      success: true,
      user: user
    });
  } catch (error) {
    res.status(401).json({
      success: false,
      error: error.message
    });
  }
});

/**
 * POST /auth/logout - –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
 */
router.post('/logout', AuthService.authenticateToken, (req, res) => {
  // JWT —Ç–æ–∫–µ–Ω—ã stateless, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤—ã—Ö–æ–¥
  res.json({
    success: true,
    message: '–£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã'
  });
});

/**
 * GET /auth/profile - –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
router.get('/profile', AuthService.authenticateToken, (req, res) => {
  try {
    const user = userService.getUserById(req.user.userId);
    
    if (!user) {
      return res.status(404).json({
        success: false,
        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    res.json({
      success: true,
      user: user
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è'
    });
  }
});

/**
 * POST /auth/change-password - –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è
 */
router.post('/change-password', 
  AuthService.authenticateToken, 
  changePasswordValidation, 
  handleValidationErrors, 
  async (req, res) => {
    try {
      const { currentPassword, newPassword } = req.body;
      
      const result = await userService.changePassword(
        req.user.userId, 
        currentPassword, 
        newPassword
      );

      res.json(result);
    } catch (error) {
      res.status(400).json({
        success: false,
        error: error.message
      });
    }
  }
);

/**
 * GET /auth/users - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞)
 */
router.get('/users', 
  AuthService.authenticateToken, 
  AuthService.requireSuperAdmin, 
  (req, res) => {
    try {
      const users = userService.getAllUsers(req.user.userId);
      res.json({
        success: true,
        users: users
      });
    } catch (error) {
      res.status(403).json({
        success: false,
        error: error.message
      });
    }
  }
);

/**
 * POST /auth/users - –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞)
 */
router.post('/users', 
  createUserLimiter,
  AuthService.authenticateToken, 
  AuthService.requireSuperAdmin,
  createUserValidation,
  handleValidationErrors,
  async (req, res) => {
    try {
      const result = await userService.createUser(req.body, req.user.userId);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ
      try {
        await emailService.sendWelcomeEmail(
          result.user.email, 
          result.user.name, 
          result.generatedPassword
        );
      } catch (emailError) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–∏—Å—å–º–∞:', emailError);
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      }

      res.status(201).json({
        success: true,
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
        user: result.user,
        generatedPassword: result.generatedPassword
      });
    } catch (error) {
      res.status(400).json({
        success: false,
        error: error.message
      });
    }
  }
);

/**
 * PUT /auth/users/:id - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞)
 */
router.put('/users/:id', 
  AuthService.authenticateToken, 
  AuthService.requireSuperAdmin,
  async (req, res) => {
    try {
      const userId = parseInt(req.params.id);
      const result = await userService.updateUser(userId, req.body, req.user.userId);

      res.json({
        success: true,
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω',
        user: result.user
      });
    } catch (error) {
      res.status(400).json({
        success: false,
        error: error.message
      });
    }
  }
);

/**
 * DELETE /auth/users/:id - –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞)
 */
router.delete('/users/:id', 
  AuthService.authenticateToken, 
  AuthService.requireSuperAdmin,
  async (req, res) => {
    try {
      const userId = parseInt(req.params.id);
      const result = await userService.deleteUser(userId, req.user.userId);

      res.json(result);
    } catch (error) {
      res.status(400).json({
        success: false,
        error: error.message
      });
    }
  }
);

/**
 * POST /auth/users/:id/reset-password - –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞ –∏ –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞)
 */
router.post('/users/:id/reset-password', 
  AuthService.authenticateToken, 
  AuthService.requireFullAccess,
  async (req, res) => {
    try {
      const userId = parseInt(req.params.id);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—Ä–æ–ª—å –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è —Å–∞–º–æ–º—É —Å–µ–±–µ, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω
      if (userId === req.user.userId && req.user.role !== 'superadmin') {
        return res.status(400).json({
          success: false,
          error: '–î–ª—è —Å–±—Ä–æ—Å–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è'
        });
      }

      const result = await userService.resetPassword(userId, req.user.userId);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ —Å –Ω–æ–≤—ã–º –ø–∞—Ä–æ–ª–µ–º
      try {
        await emailService.sendPasswordResetEmail(
          result.user.email, 
          result.user.name, 
          result.newPassword
        );
      } catch (emailError) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞ —Å–æ —Å–±—Ä–æ—à–µ–Ω–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º:', emailError);
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
      }

      res.json({
        success: true,
        message: '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        user: result.user
        // –ù–ï –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –≤ –æ—Ç–≤–µ—Ç–µ –ø–æ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      });
    } catch (error) {
      res.status(400).json({
        success: false,
        error: error.message
      });
    }
  }
);

module.exports = router;