import React, { createContext, useContext, useState, useEffect } from 'react';

const AuthContext = createContext(null);

const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–∫–µ–Ω–∞–º–∏
const tokenUtils = {
  getToken: () => localStorage.getItem('authToken'),
  setToken: (token) => localStorage.setItem('authToken', token),
  removeToken: () => localStorage.removeItem('authToken'),

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  getAuthHeaders: () => {
    const token = tokenUtils.getToken();
    return token ? { 'Authorization': `Bearer ${token}` } : {};
  }
};

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
const apiUtils = {
  async request(url, options = {}) {
    const response = await fetch(`${API_BASE_URL}${url}`, {
      headers: {
        'Content-Type': 'application/json',
        ...tokenUtils.getAuthHeaders(),
        ...options.headers,
      },
      ...options,
    });

    if (!response.ok) {
      const error = await response.json().catch(() => ({ error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞' }));
      throw new Error(error.error || `HTTP error! status: ${response.status}`);
    }

    return response.json();
  },

  async get(url, options = {}) {
    return this.request(url, { method: 'GET', ...options });
  },

  async post(url, data, options = {}) {
    return this.request(url, {
      method: 'POST',
      body: JSON.stringify(data),
      ...options,
    });
  },

  async put(url, data, options = {}) {
    return this.request(url, {
      method: 'PUT',
      body: JSON.stringify(data),
      ...options,
    });
  },

  async delete(url, options = {}) {
    return this.request(url, { method: 'DELETE', ...options });
  }
};

export const AuthProvider = ({ children }) => {
  const [currentUser, setCurrentUser] = useState(null);
  const [users, setUsers] = useState([]);
  const [isInitialized, setIsInitialized] = useState(false);
  const [loading, setLoading] = useState(true);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
  useEffect(() => {
    const initializeAuth = async () => {
      console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AuthContext...');
      setLoading(true);

      const token = tokenUtils.getToken();
      if (token) {
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
          const response = await apiUtils.post('/auth/verify', { token });
          if (response.success) {
            console.log('‚úÖ –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', response.user.email);
            setCurrentUser(response.user);
          } else {
            console.log('‚ö†Ô∏è –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω, –æ—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é');
            tokenUtils.removeToken();
          }
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞:', error);
          tokenUtils.removeToken();
        }
      }

      setIsInitialized(true);
      setLoading(false);
      console.log('‚úÖ AuthContext –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    };

    initializeAuth();
  }, []);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞
  useEffect(() => {
    const loadUsers = async () => {
      if (currentUser?.role === 'superadmin') {
        try {
          const response = await apiUtils.get('/auth/users');
          if (response.success) {
            setUsers(response.users);
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
        }
      }
    };

    if (isInitialized && currentUser) {
      loadUsers();
    }
  }, [currentUser, isInitialized]);

  const login = async (email, password) => {
    try {
      console.log('üîë –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:', { email, password: '***' });
      const response = await apiUtils.post('/auth/login', { email, password });

      if (response.success) {
        tokenUtils.setToken(response.token);
        setCurrentUser(response.user);
        console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ API:', response.user.email);
        return { success: true };
      } else {
        return { success: false, error: response.error };
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
      // –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      if (error.message === 'Failed to fetch') {
        return { success: false, error: '–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.' };
      }
      return { success: false, error: error.message };
    }
  };

  const logout = async () => {
    try {
      // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä –æ –≤—ã—Ö–æ–¥–µ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
      await apiUtils.post('/auth/logout');
    } catch (error) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å —Å–µ—Ä–≤–µ—Ä –æ –≤—ã—Ö–æ–¥–µ:', error.message);
    } finally {
      // –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω
      tokenUtils.removeToken();
      setCurrentUser(null);
      setUsers([]);
      console.log('‚úÖ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
    }
  };

  const isSuperAdmin = () => {
    return currentUser?.role === 'superadmin';
  };

  const hasFullAccess = () => {
    return currentUser?.role === 'superadmin' || currentUser?.role === 'full_access';
  };

  const canAccessUpload = () => {
    return currentUser?.role === 'superadmin' || currentUser?.role === 'full_access';
  };

  const addUser = async (userData) => {
    try {
      const response = await apiUtils.post('/auth/users', userData);

      if (response.success) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        setUsers(prev => [...prev, response.user]);
        return {
          success: true,
          user: response.user,
          generatedPassword: response.generatedPassword
        };
      } else {
        throw new Error(response.error);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      throw error;
    }
  };

  const updateUser = async (userId, userData) => {
    try {
      const response = await apiUtils.put(`/auth/users/${userId}`, userData);

      if (response.success) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        setUsers(prev => prev.map(user =>
          user.id === userId ? response.user : user
        ));
        return { success: true, user: response.user };
      } else {
        throw new Error(response.error);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      throw error;
    }
  };

  const deleteUser = async (userId) => {
    try {
      const response = await apiUtils.delete(`/auth/users/${userId}`);

      if (response.success) {
        // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞
        setUsers(prev => prev.filter(user => user.id !== userId));
        return { success: true };
      } else {
        throw new Error(response.error);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      throw error;
    }
  };

  const getAllUsers = () => {
    return users;
  };

  // –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è
  const changePassword = async (currentPassword, newPassword) => {
    try {
      const response = await apiUtils.post('/auth/change-password', {
        currentPassword,
        newPassword
      });

      return response;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è:', error);
      throw error;
    }
  };

  // –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const resetUserPassword = async (userId) => {
    try {
      const response = await apiUtils.post(`/auth/users/${userId}/reset-password`);

      if (response.success) {
        return {
          success: true,
          message: response.message,
          user: response.user
        };
      } else {
        throw new Error(response.error);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è:', error);
      throw error;
    }
  };

  return (
    <AuthContext.Provider value={{
      currentUser,
      isAuthenticated: !!currentUser,
      isInitialized,
      loading,
      login,
      logout,
      isSuperAdmin,
      hasFullAccess,
      canAccessUpload,
      addUser,
      updateUser,
      deleteUser,
      getAllUsers,
      changePassword,
      resetUserPassword,
      users,
      // –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
      apiUtils,
      tokenUtils
    }}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
}; 